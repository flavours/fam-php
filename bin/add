#!/usr/bin/env php
<?php

require("/fam-php/vendor/autoload.php");

use Symfony\Component\Yaml\Yaml;
use Symfony\Component\Yaml\Exception\ParseException;

const FLAVOUR_FILE = 'app.flavour';

function add() : void
{
    $yaml_str = stream_get_contents(STDIN);
    $yaml = Yaml::parse($yaml_str);
    $yaml_hash = save_yaml($yaml_str);
    $devmode = $yaml['install']['mode'] == "dev";
    $composer_requirement = $yaml['install']['package'];
    $flavour_package = $yaml['meta']['name'];
    $flavour_package_version = $yaml['meta']['version'];

    add_requirement($composer_requirement, $devmode);
    update_flavour_file($flavour_package, $flavour_package_version, $yaml_hash, $devmode);

    if (isset($yaml['install']['post-install'])) {
        post_install($yaml['install']['post-install']);
    }
}

function save_yaml($yaml) : string
{
    $path = implode(DIRECTORY_SEPARATOR, ['.flavour', 'addons']);
    $hash = hash('sha256', $yaml);

    if (!is_dir($path)) {
        mkdir($path, 0777, true);
    }
    file_put_contents($path . DIRECTORY_SEPARATOR . $hash, $yaml);

    return $hash;
}

function add_requirement($requirement, $devmode=false) : string
{
    $command = [
        "composer",
        "require",
        "--no-update",
        $requirement,
    ];

    if ($devmode) {
        $command[] = "--dev";
    }

    exec(implode(" ", $command), $output, $response);

    if ($response > 0) {
        throw new \Exception("Requirement could not be installed! ");
    }

    return $requirement;
}

function update_version(&$yaml, $flavour_package, $version) : void
{
    foreach (array_keys($yaml['addons']) as $addon_key) {
        list($addon, $addon_version) = explode(':', $addon_key);
        if ($addon == $flavour_package) {
            if ($version !== $addon_version) {
                unset($yaml['addons'][$addon .':'. $addon_version]);
            }
        }
    }
}

function update_flavour_file($flavour_package, $flavour_package_version, $yaml_hash, $devmode=false) : void
{
    $yaml = Yaml::parse(file_get_contents(FLAVOUR_FILE));

    if (!isset($yaml['addons'])) {
        $yaml['addons'] = $yaml['addons'] ?: [];
    }

    update_version($yaml, $flavour_package, $flavour_package_version);

    $yaml['addons'][$flavour_package .":". $flavour_package_version] = [
        'manager' => $_ENV['FAM_IDENTIFIER'],
        'hash' => $yaml_hash,
    ];

    file_put_contents(FLAVOUR_FILE, Yaml::dump($yaml, 4));
}


function post_install($scripts) : void
{
    if (is_array($scripts)) {
        exec('composer update --no-scripts');

        foreach ($scripts as $script) {
            exec($script, $output);
        }
    }
}

/**
 * TODO: just for debugging purposes, will be removed
 */
function lg($var)
{
    file_put_contents("flavour.log", print_r($var, true), FILE_APPEND);
}

add();
